---
AWSTemplateFormatVersion: '2010-09-09'
Description: Template to create AWS resources for onboarding an account with Sophos Optix


# ExternalId and CustomerId come from the Sophos Optix UI.

Parameters:
  ExternalId:
    Type: String
    Description: Enter the External ID from the Sophos Optix UI CFN onboardng
  CustomerId:
    Type: String
    Description: Enter your customer ID from the Sophos Optix UI CFN onboardng
  DnsPrefixFlow:
    Type: String
    Description: Enter the DNS Prefix for the VPC flow logs, found from the Sophos Optix UI CFN onboardng
  DnsPrefixCloudTrail:
    Type: String
    Description: Enter the DNS Prefix for your CloudTrail, found from the Sophos Optix UI CFN onboardng
  ReqID:
    Type: String
    Description: Request ID
  CloudTrail:
    Type: String
    Default: CT-AvidSecure
    Description: Enter the CloudTrail name you wish to use. If unspecified, it will default to CT-AvidSecure
  CloudTrailRegion:
    Type: String
    Default: us-west-1
    Description: Enter the region of the existing Cloudtrail you wish to use. If unspecified, it will default to us-west-1. PS this may cause failure of onboarding if incorrect
  IsOrganizationTrail:
    AllowedValues: [true, false]
    Default: false
    Type: String
    Description: ONLY for Organization Cloudtrails. Set to 'true' if you are using an organization cloudtrail for your setup. This will skip creating CloudTrail related resources which will need to be created using a separate script.
  BucketPrefix:
    Type: String
    Default: avid-cloudtrail-
  AvidAccountId:
    Type: String
    Default: 857603578240
  RegionList:
    Type: String
    Default: "us-west-1,us-west-2,us-east-1,us-east-2,eu-west-1,eu-west-2,eu-central-1,ap-south-1,ap-southeast-1,ap-southeast-2,ap-northeast-1,ap-northeast-2,sa-east-1,ca-central-1,eu-west-3,eu-north-1,af-south-1,eu-south-1,me-south-1"
    Description: Enter the regions you wish to execute the template for

Conditions:
  UseSophosOptixTrail: !Equals [ !Ref CloudTrail, CT-AvidSecure ]
  UseExistingTrail: !Not [!Equals [ !Ref CloudTrail, CT-AvidSecure ]]
  CreateCloudtrailResource: !Not [!Equals [true, !Ref IsOrganizationTrail]]

Resources:
# Create IAM Role for Optix and its policy
  OptixRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: Avid-Role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              AWS: !Ref AvidAccountId
            Condition:
              StringEquals:
                sts:ExternalId: !Ref ExternalId
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/SecurityAudit"
      Policies:
      - PolicyName: 'Sophos-Optix-read-policy'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            Effect: Allow
            Action:
            - elasticfilesystem:DescribeMountTargetSecurityGroups
            - elasticfilesystem:DescribeMountTargets
            - sns:ListSubscriptions
            - s3:GetAccountPublicAccessBlock
            - ce:GetCostAndUsage
            - ce:GetCostForecast
            - ce:GetUsageForecast
            - eks:List*
            - detective:ListGraphs
            Resource: '*'

# Create Lambda Execution role for the dynamically discovered resources
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "Avid-Lambda-Execution-Role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: 'Avid-Lambda-Execution-policy'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - lambda:CreateFunction
            - lambda:AddPermission
            - lambda:DeleteFunction
            - lambda:RemovePermission
            Resource: [!Sub "arn:aws:lambda:*:${AWS::AccountId}:function:Avid-VPC-LOGS-function", !Sub "arn:aws:lambda:*:${AWS::AccountId}:function:AvidRegionalResourcesLambda"]
          - Effect: Allow
            Action:
            - iam:PassRole
            Resource: [!GetAtt 'OptixLambdaCFNRole.Arn', !GetAtt 'OptixVpcCFNRole.Arn', !GetAtt 'OptixCTtoCWRole.Arn']
          - Effect: Allow
            Action:
            - s3:GetObject
            Resource: "arn:aws:s3:::sophos-optix-stage-deploy-*"
          - Effect: Allow
            Action:
            - cloudtrail:UpdateTrail
            Resource:  !If [UseSophosOptixTrail, !GetAtt 'SophosOptixCTCFN.Arn', !Join ["", ['arn:aws:cloudtrail:', !Ref CloudTrailRegion , !Sub ':${AWS::AccountId}:trail/', !Ref CloudTrail]]]
          - Effect: Allow
            Action:
            - organizations:DescribeOrganization
            - organizations:ListAWSServiceAccessForOrganization
            - iam:GetRole
            - iam:CreateServiceLinkedRole
            - ec2:DescribeVpcs
            - ec2:DescribeFlowLogs
            - ec2:CreateFlowLogs
            - ec2:DeleteFlowLogs
            Resource: "*"
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:PutLogEvents
            - logs:CreateLogStream
            - logs:PutSubscriptionFilter
            - logs:DeleteLogGroup
            - logs:DeleteSubscriptionFilter
            - logs:DeleteRetentionPolicy
            - logs:PutRetentionPolicy
            Resource: [!Sub "arn:aws:logs:*:${AWS::AccountId}:log-group:*Avid*", !Sub "arn:aws:logs:*:${AWS::AccountId}:*Avid*:log-stream:*"]

# Create VPC role
  OptixVpcCFNRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Avid-VPCFlow-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: 'vpc-flow-logs.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: 'Avid-VPCFlow-policy'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            Resource: '*'

# Create S3 bucket for cloudtrail
  OptixCTBucket:
    Type: AWS::S3::Bucket
    Condition: UseSophosOptixTrail
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub '${BucketPrefix}${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: "aws:kms"
            KMSMasterKeyID: "aws/s3"

  OptixCTBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: UseSophosOptixTrail
    Properties:
      Bucket: !Ref OptixCTBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AWSCloudTrailAclCheck
          Effect: Allow
          Principal:
            Service: 'cloudtrail.amazonaws.com'
          Action: 's3:GetBucketAcl'
          Resource: !Sub 'arn:aws:s3:::${OptixCTBucket}'
        - Sid: AWSCloudTrailWrite
          Effect: Allow
          Principal:
            Service: 'cloudtrail.amazonaws.com'
          Action: 's3:PutObject'
          Resource: !Sub 'arn:aws:s3:::${OptixCTBucket}/AWSLogs/${AWS::AccountId}/*'
          Condition:
            StringEquals:
              's3:x-amz-acl': 'bucket-owner-full-control'

# Create cloudtrail log group
  OptixCTLogGroupCFN:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: CT-Avid-LogGroup

# Create role to route cloudtrail to cloudwatch
  OptixCTtoCWRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Avid-CT-to-CW
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AssumeRole2
          Effect: Allow
          Principal:
            Service: 'cloudtrail.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: 'cloud-traildata-policy'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: AWSCloudTrailCreateLogStream
            Effect: Allow
            Action: 'logs:CreateLogStream'
            Resource: !GetAtt 'OptixCTLogGroupCFN.Arn'
          - Sid: AWSCloudTrailPutLogEvents
            Effect: Allow
            Action: 'logs:PutLogEvents'
            Resource: !GetAtt 'OptixCTLogGroupCFN.Arn'

# Now create the cloudtrail with the above references.
  SophosOptixCTCFN:
    Condition: UseSophosOptixTrail
    DependsOn:
      - OptixCTBucketPolicy
    Type: AWS::CloudTrail::Trail
    Properties:
      CloudWatchLogsLogGroupArn: !GetAtt 'OptixCTLogGroupCFN.Arn'
      CloudWatchLogsRoleArn: !GetAtt 'OptixCTtoCWRole.Arn'
      EnableLogFileValidation: true
      IncludeGlobalServiceEvents: true
      IsLogging: true
      IsMultiRegionTrail: true
      S3BucketName: !Ref OptixCTBucket
      TrailName: CT-AvidSecure

# Create Lambda role
  OptixLambdaCFNRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "Avid-Lambda-to-CloudWatch"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: 'lambda.amazonaws.com'
          Action: 'sts:AssumeRole'

# Create Lambda Function.
  OptixCloudTrailfunctionCFN:
    Type: AWS::Lambda::Function
    Condition: CreateCloudtrailResource
    Properties:
      FunctionName: "Avid-CloudTrail-function"
      Handler: "collector-lambda.lambda_handler"
      Role: !GetAtt OptixLambdaCFNRole.Arn
      Environment:
        Variables:
          CUSTOMER_ID: !Ref CustomerId
          DNS_PREFIX: !Ref DnsPrefixCloudTrail
          DNS_PATH: "cloudtrail"
      Runtime: 'python3.8'
      Timeout: 10
      MemorySize: 128
      Code:
        S3Bucket: !Join ["", ["sophos-optix-stage-deploy-", !Ref 'AWS::Region']]
        S3Key: 'collector-lambda.zip'

  OptixSubFilter:
    DependsOn: OptixCloudTrailfunctionCFN
    Type: AWS::Logs::SubscriptionFilter
    Condition: CreateCloudtrailResource
    Properties:
      FilterPattern: ""
      LogGroupName: CT-Avid-LogGroup
      DestinationArn: !GetAtt OptixCloudTrailfunctionCFN.Arn

  OptixCWPermissionLambda:
    Type: AWS::Lambda::Permission
    Condition: CreateCloudtrailResource
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt OptixCloudTrailfunctionCFN.Arn
      Principal: !Join ["", ['logs.', !Ref 'AWS::Region', '.amazonaws.com']]
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Join ["", ['arn:aws:logs:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':log-group:', 'CT-Avid-LogGroup:*']]

  RegionalResourcesCreation:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "AvidRegionalResourcesLambda"
      Code:
        S3Bucket: !Join ["", ["sophos-optix-stage-deploy-", !Ref 'AWS::Region']]
        S3Key: 'regionResourcesLambda.zip'
      Handler: "regionResourcesLambda.handler"
      Runtime: nodejs10.x
      Timeout: 300
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          Region: !Ref "AWS::Region"
          RegionList: !Ref RegionList
          RoleArn: !GetAtt 'OptixLambdaCFNRole.Arn'
          AccountId: !Ref 'AWS::AccountId'
          RoleForFlowLogs: !GetAtt 'OptixVpcCFNRole.Arn'
          CustomerId: !Ref CustomerId
          ExternalId: !Ref ExternalId
          CloudTrail: !If [UseExistingTrail, !Ref CloudTrail, ""]
          CloudTrailRegion: !If [UseExistingTrail, !Ref CloudTrailRegion, ""]
          IsOrganizationTrail: !Ref IsOrganizationTrail
          CloudWatchLogsLogGroupArn: !If [CreateCloudtrailResource, !GetAtt 'OptixCTLogGroupCFN.Arn', ""]
          CloudWatchLogsRoleArn: !If [CreateCloudtrailResource, !GetAtt 'OptixCTtoCWRole.Arn', ""]
          DnsPrefix: !Ref DnsPrefixFlow
          AvidRequestId: !Ref ReqID
          DnsPrefixCollector: !Ref DnsPrefixCloudTrail
          AssumeRoleArn: !GetAtt 'OptixRole.Arn'
          OptixDomain: 'https://staging.optix.sophos.com'
          FriendlyName: !Join ["", ["CloudOptixStack", '-', !Ref 'AWS::AccountId']]

  RegionalResources:
      Type: Custom::RegionalResources
      Properties:
        ServiceToken: !GetAtt RegionalResourcesCreation.Arn

Outputs:
  ExternalId:
    Description: The External Id to be used for account onboarding
    Value: !Ref ExternalId
  RoleArn:
    Description: The Role ARM for the Cloud Optix role
    Value: !GetAtt 'OptixRole.Arn'
  AccountId:
    Description: The Account Id to be used for account onboarding
    Value: !Ref 'AWS::AccountId'
